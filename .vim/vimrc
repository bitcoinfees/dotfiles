"Vundle stuff
set nocompatible
filetype off
set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()
Plugin 'VundleVim/Vundle.vim'
Plugin 'tpope/vim-sensible.git'
Plugin 'altercation/vim-colors-solarized.git'
Plugin 'jmcantrell/vim-virtualenv'
Plugin 'vim-airline/vim-airline'
Plugin 'vim-airline/vim-airline-themes'
Plugin 'scrooloose/nerdtree'
Plugin 'b4winckler/vim-angry'
Plugin 'sjl/gundo.vim.git'
Plugin 'fatih/vim-go.git'
Plugin 'majutsushi/tagbar'
Plugin 'Raimondi/delimitMate'
Plugin 'mattn/emmet-vim.git'
Plugin 'davidhalter/jedi-vim'
Plugin 'nvie/vim-flake8'
Plugin 'ctrlpvim/ctrlp.vim'
Plugin 'christoomey/vim-tmux-navigator'
Plugin 'tpope/vim-fugitive'
Plugin 'Shougo/neocomplete.vim'
call vundle#end()
filetype plugin indent on

syntax on
set background=dark
set t_Co=256
colorscheme alduin
let g:airline_theme='lucius'
set number
set relativenumber
set showcmd
set mouse=a
set shell=/bin/sh
runtime ftplugin/man.vim

" fix meta-keys which generate <Esc>a .. <Esc>z
let c='a'
while c <= 'z'
  exec "set <M-".toupper(c).">=\e".c
  exec "imap \e".c." <M-".toupper(c).">"
  let c = nr2char(1+char2nr(c))
endw
set noesckeys

"Tabs
set expandtab
set tabstop=4
set shiftwidth=4
autocmd FileType html
    \ setlocal shiftwidth=2 |
    \ setlocal tabstop=2

set undofile
set undodir=~/.vim/undodir
set foldmethod=indent
set foldlevel=99
set ic
map <leader>G :GundoToggle<CR>
map <leader>N :NERDTreeToggle<CR>
map <c-j> <c-w>j
map <c-k> <c-w>k
map <c-l> <c-w>l
map <c-h> <c-w>h

"Fast tabs
nmap <M-K> :tabnext<CR>
nmap <M-J> :tabprevious<CR>
nmap <M-T> :tabnew<CR>
nmap <M-X> :tabclose<CR>

set backupdir=~/.vim/backup
set directory=~/.vim/backup

"This stops autocomplete from opening a new window
set completeopt-=preview
"autocmd FileType python setlocal completeopt-=preview
"autocmd FileType pyrex setlocal completeopt-=preview

let g:jedi#auto_vim_configuration = 0
let g:jedi#popup_on_dot = 0
let g:jedi#popup_select_first = 0
let g:jedi#completions_enabled = 0
let g:jedi#completions_command = ""
"1 is for inline, 2 is for command bar (buggy)
let g:jedi#show_call_signatures = "1"
let g:jedi#documentation_command = "<leader>K"

"ctrlP
let g:ctrlp_extensions = ['tag']
nmap <leader>b :CtrlPBuffer<CR>
nmap <leader>t :CtrlPTag<CR>

"Tagbar
nmap <leader>T :TagbarToggle<CR>

"We already have vim-airline
set noshowmode

"Allow/detect triple quotes
autocmd FileType python let b:delimitMate_nesting_quotes = ['"']
autocmd FileType pyrex let b:delimitMate_nesting_quotes = ['"']

" Golang
let g:go_highlight_functions = 1
let g:go_highlight_methods = 1
let g:go_highlight_structs = 1
let g:go_highlight_operators = 1
let g:go_highlight_build_constraints = 1
let g:go_fmt_autosave = 1
"let g:go_fmt_command = "goimports"
au FileType go nmap <leader>dt <Plug>(go-def-tab)
"Always push quickfix to bottom
autocmd FileType qf wincmd J

" Speeds up Golang syntax highlighting, for some reason
set nocursorline
set synmaxcol=128
syntax sync minlines=256
set nocursorcolumn
set re=1

"NeoComplete
let g:neocomplete#enable_at_startup = 1
let g:neocomplete#enable_smart_case = 1
let g:neocomplete#sources#syntax#min_keyword_length = 3
let g:neocomplete#lock_buffer_name_pattern = '\*ku\*'
" Define keyword.
if !exists('g:neocomplete#keyword_patterns')
    let g:neocomplete#keyword_patterns = {}
endif
let g:neocomplete#keyword_patterns['default'] = '\h\w*'
" Recommended key-mappings.
inoremap <silent> <CR> <C-r>=<SID>my_cr_function()<CR>
function! s:my_cr_function()
  return (pumvisible() ? "\<C-y>" : "" ) . "\<CR>"
endfunction
inoremap <expr><TAB>  pumvisible() ? "\<C-n>" : "\<TAB>"
"inoremap <expr><BS> neocomplete#smart_close_popup()."\<C-h>"

autocmd FileType css setlocal omnifunc=csscomplete#CompleteCSS
autocmd FileType html,markdown setlocal omnifunc=htmlcomplete#CompleteTags
autocmd FileType javascript setlocal omnifunc=javascriptcomplete#CompleteJS
autocmd FileType python setlocal omnifunc=jedi#completions
autocmd FileType xml setlocal omnifunc=xmlcomplete#CompleteTags

"let g:neocomplete#disable_auto_complete = 1
"let g:neocomplete#enable_auto_select = 1
