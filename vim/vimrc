call plug#begin()
Plug 'tpope/vim-sensible'
Plug 'altercation/vim-colors-solarized'
Plug 'jmcantrell/vim-virtualenv'
Plug 'vim-airline/vim-airline'
Plug 'vim-airline/vim-airline-themes'
Plug 'b4winckler/vim-angry'
Plug 'sjl/gundo.vim'
Plug 'fatih/vim-go'
Plug 'Raimondi/delimitMate'
Plug 'mattn/emmet-vim'
Plug 'davidhalter/jedi-vim'
Plug 'nvie/vim-flake8'
Plug 'ctrlpvim/ctrlp.vim'
Plug 'tpope/vim-fugitive'
Plug 'Shougo/neocomplete.vim'
Plug 'dag/vim-fish'
Plug 'tpope/vim-surround'
Plug 'scrooloose/nerdtree', { 'on': 'NERDTreeToggle' }
Plug 'majutsushi/tagbar', { 'on': 'TagbarToggle' }
call plug#end()

" fix meta-keys which generate <Esc>a .. <Esc>z
let c='a'
while c <= 'z'
  exec "set <M-".toupper(c).">=\e".c
  exec "imap \e".c." <M-".toupper(c).">"
  let c = nr2char(1+char2nr(c))
endw
set noesckeys

syntax on
set background=dark
set t_Co=256
colorscheme alduin
set number
set relativenumber
set showcmd
set mouse=n
set ttimeoutlen=0 "Stop escape key from triggering meta sequences
set encoding=utf8
set undofile
set undodir=~/.vim/undodir
set backupdir=~/.vim/backup
set directory=~/.vim/backup
set foldmethod=indent
set foldlevel=99
set ic
set noshowmode "We already have vim-airline

runtime ftplugin/man.vim

"Fast tabs
nmap <M-K> :tabnext<CR>
nmap <M-J> :tabprevious<CR>
nmap <M-T> :tabnew %<CR>
nmap <M-X> :tabclose<CR>

"Indentation
set expandtab
set tabstop=4
set shiftwidth=4
autocmd FileType html
    \ setlocal shiftwidth=2 |
    \ setlocal tabstop=2
autocmd FileType c
    \ set noexpandtab
autocmd FileType ruby
    \ setlocal shiftwidth=2 |
    \ setlocal tabstop=2

"panes
map <c-j> <c-w>j
map <c-k> <c-w>k
map <c-l> <c-w>l
map <c-h> <c-w>h

map <leader>G :GundoToggle<CR>
map <leader>N :NERDTreeToggle<CR>
map <leader>m :marks<CR>

"gundo
let g:gundo_prefer_python3 = 1

"Buffer switching
nnoremap <M-B> :b#<CR>

"airline
let g:airline_theme='lucius'
let g:airline#extensions#tagbar#enabled = 0

"NERDTree
let g:NERDTreeMapHelp = '<F1>'

"This stops autocomplete from opening a new window
set completeopt-=preview
"autocmd FileType python setlocal completeopt-=preview
"autocmd FileType pyrex setlocal completeopt-=preview

"Remap emmet leader
let g:user_emmet_leader_key='<C-S>'

let g:jedi#auto_vim_configuration = 0
let g:jedi#popup_on_dot = 0
let g:jedi#popup_select_first = 0
let g:jedi#completions_enabled = 0
let g:jedi#completions_command = ""
"1 is for inline, 2 is for command bar (buggy)
let g:jedi#show_call_signatures = "2"
let g:jedi#documentation_command = "<leader>K"
let g:jedi#use_tabs_not_buffers = 1

"ctrlP
let g:ctrlp_extensions = ['tag']
nmap <space> :CtrlPBuffer<CR>
nmap <leader>t :CtrlPTag<CR>
let g:ctrlp_working_path_mode = 0
let g:ctrlp_switch_buffer = 0

"Tagbar
nmap <leader>T :TagbarToggle<CR>
let g:tagbar_map_help = ['<F1>']
let g:tagbar_type_go = {
    \ 'ctagstype' : 'go',
    \ 'kinds'     : [
        \ 'p:package',
        \ 'i:imports:1',
        \ 'c:constants',
        \ 'v:variables',
        \ 't:types',
        \ 'n:interfaces',
        \ 'w:fields',
        \ 'e:embedded',
        \ 'm:methods',
        \ 'r:constructor',
        \ 'f:functions'
    \ ],
    \ 'sro' : '.',
    \ 'kind2scope' : {
        \ 't' : 'ctype',
        \ 'n' : 'ntype'
    \ },
    \ 'scope2kind' : {
        \ 'ctype' : 't',
        \ 'ntype' : 'n'
    \ },
    \ 'ctagsbin'  : 'gotags',
    \ 'ctagsargs' : '-sort -silent'
\ }

"Allow/detect triple quotes
autocmd FileType python let b:delimitMate_nesting_quotes = ['"']
autocmd FileType pyrex let b:delimitMate_nesting_quotes = ['"']

" Golang
let g:go_highlight_functions = 1
let g:go_highlight_methods = 1
let g:go_highlight_structs = 1
let g:go_highlight_operators = 1
let g:go_highlight_build_constraints = 1
let g:go_fmt_autosave = 0
let g:go_auto_type_info = 0
"let g:go_fmt_command = "goimports"
au FileType go nmap <leader>dt <Plug>(go-def-tab)
au FileType go nmap <Leader>i <Plug>(go-info)
au FileType go nmap <Leader>e <Plug>(go-rename)
au FileType go nmap <Leader>f :GoFmt<CR>
"Always push quickfix to bottom
autocmd FileType qf wincmd J

" Speeds up Golang syntax highlighting, for some reason
set nocursorline
set synmaxcol=128
syntax sync minlines=256
set nocursorcolumn
set re=1

"NeoComplete
set shortmess+=c "it's blocking vim-go's function sigs
let g:neocomplete#enable_at_startup = 1
let g:neocomplete#enable_smart_case = 0
let g:neocomplete#sources#syntax#min_keyword_length = 3
let g:neocomplete#lock_buffer_name_pattern = '\*ku\*'
" Define keyword.
if !exists('g:neocomplete#keyword_patterns')
    let g:neocomplete#keyword_patterns = {}
endif
let g:neocomplete#keyword_patterns['default'] = '\h\w*'
" Recommended key-mappings.
inoremap <silent> <CR> <C-r>=<SID>my_cr_function()<CR>
function! s:my_cr_function()
  return (pumvisible() ? "\<C-y>" : "" ) . "\<CR>"
endfunction
inoremap <expr><TAB>  pumvisible() ? "\<C-n>" : "\<TAB>"
imap <expr><BS> neocomplete#smart_close_popup()."\<C-h>"

autocmd FileType css setlocal omnifunc=csscomplete#CompleteCSS
autocmd FileType html,markdown setlocal omnifunc=htmlcomplete#CompleteTags
autocmd FileType javascript setlocal omnifunc=javascriptcomplete#CompleteJS
autocmd FileType python setlocal omnifunc=jedi#completions
autocmd FileType xml setlocal omnifunc=xmlcomplete#CompleteTags

"let g:neocomplete#disable_auto_complete = 1
"let g:neocomplete#enable_auto_select = 1

"solve os x cron problems
autocmd filetype crontab setlocal nobackup nowritebackup

"FishMarks cd. Usage: :Fcd <mark>
command! -nargs=1 Fcd cd `=system("p <args>")`
"FishMarks lcd. Usage: :Flcd <mark>
command! -nargs=1 Flcd lcd `=system("p <args>")`

command! -nargs=? W write <args> "I'm sick of entering W when i meant to w[rite]

set shell=$SHELL\ -l
